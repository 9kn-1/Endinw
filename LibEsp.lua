local DripESP = {} local connections = {} local all_settings = {} local player = game.Players.LocalPlayer local char = player.Character or player.CharacterAdded:Wait() local rootPart = char:WaitForChild("HumanoidRootPart") local ESPFolder = workspace:FindFirstChild("ESP_Objects") if not ESPFolder then ESPFolder = Instance.new("Folder") ESPFolder.Name = "ESP_Objects" ESPFolder.Parent = workspace end local EsQu = {} local IsPROQU = false local MaxPr = 1 local CacTG = {} local LACaUp = 0 local CacIN = 2 local lastCleanupTime = 0 local function processEsQu() if IsPROQU then return end IsPROQU = true task.spawn(function() while #EsQu > 0 do local processed = 0 for i = #EsQu, 1, -1 do if processed >= MaxPr then break end local queueItem = EsQu[i] if queueItem and queueItem.target and queueItem.target.Parent then pcall(applyESP, queueItem.target, queueItem.ESP_ID, queueItem.settings) processed = processed + 1 end table.remove(EsQu, i) end task.wait(0.1) end IsPROQU = false end) end local function addToQueue(target, ESP_ID, settings) table.insert(EsQu, { target = target, ESP_ID = ESP_ID, settings = settings, }) processEsQu() end local function updateCache() local currentTime = tick() if currentTime - LACaUp < CacIN then return end CacTG = {} local descendants = workspace:GetDescendants() local batchSize = 100 local currentBatch = 0 for i, item in ipairs(descendants) do if currentBatch >= batchSize then task.wait() currentBatch = 0 end if item:IsA("Model") or item:IsA("BasePart") then if not CacTG[item.Name] then CacTG[item.Name] = {} end table.insert(CacTG[item.Name], item) currentBatch = currentBatch + 1 end end LACaUp = currentTime end function DripESP.SetOptions(ESP_ID, opts) all_settings[ESP_ID] = { TargetName = opts.TargetName or opts.ModelName or "Model", CustomText = opts.CustomText or "Target", TextColor = opts.TextColor or Color3.fromRGB(255, 255, 255), OutlineColor = opts.OutlineColor or Color3.fromRGB(255, 0, 0), FillColor = opts.FillColor or Color3.fromRGB(255, 0, 0), FillTransparency = opts.FillTransparency or 0.7, OutlineTransparency = opts.OutlineTransparency or 0, TextSize = opts.TextSize or 16, CheckForHumanoid = opts.CheckForHumanoid or false, TargetType = opts.TargetType or "Both", HighlightName = "ESP_Highlight_" .. ESP_ID, BillboardName = "ESP_Billboard_" .. ESP_ID, MaxDistance = opts.MaxDistance or 1000, CustomTextFormatter = opts.CustomTextFormatter or nil, } end function applyESP(target, ESP_ID, settings) local isValidType = (settings.TargetType == "Both") or (settings.TargetType == "Model" and target:IsA("Model")) or (settings.TargetType == "Part" and target:IsA("BasePart")) if not isValidType then return end if target.Name ~= settings.TargetName then return end if target:IsA("Model") and settings.CheckForHumanoid and not target:FindFirstChild("Humanoid") then return end local targetPart if target:IsA("Model") then targetPart = target:FindFirstChild("HumanoidRootPart") or target:FindFirstChild("Torso") or target:FindFirstChild("Head") or target:FindFirstChildWhichIsA("BasePart") else targetPart = target end if not targetPart then return end local distance = (targetPart.Position - rootPart.Position).Magnitude if distance > settings.MaxDistance then return end local bbName = settings.BillboardName .. "_" .. target:GetDebugId() if not ESPFolder:FindFirstChild(bbName) then local billboard = Instance.new("BillboardGui") billboard.Name = bbName billboard.Parent = ESPFolder billboard.Adornee = targetPart billboard.Size = UDim2.new(0, 120, 0, 30) billboard.StudsOffset = Vector3.new(0, 2, 0) billboard.AlwaysOnTop = true local label = Instance.new("TextLabel") label.Name = "ESP_Text" label.Parent = billboard label.Size = UDim2.new(1, 0, 1, 0) label.Position = UDim2.new(0, 0, 0, 0) label.BackgroundTransparency = 1 label.TextColor3 = settings.TextColor label.TextStrokeColor3 = Color3.fromRGB(0, 0, 0) label.TextStrokeTransparency = 0.3 label.TextSize = settings.TextSize label.Font = Enum.Font.GothamBold label.TextWrapped = true label.TextYAlignment = Enum.TextYAlignment.Center if settings.CustomTextFormatter then label.Text = settings.CustomTextFormatter(target) else label.Text = settings.CustomText end end local hlName = settings.HighlightName .. "_" .. target:GetDebugId() if not ESPFolder:FindFirstChild(hlName) then local highlight = Instance.new("Highlight") highlight.Name = hlName highlight.Parent = ESPFolder highlight.Adornee = target highlight.FillColor = settings.FillColor highlight.FillTransparency = settings.FillTransparency highlight.OutlineColor = settings.OutlineColor highlight.OutlineTransparency = settings.OutlineTransparency highlight.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop end end function DripESP.Enable(ESP_ID) local settings = all_settings[ESP_ID] if not settings then return end updateCache() local targets = CacTG[settings.TargetName] or {} for _, item in ipairs(targets) do if item.Parent then addToQueue(item, ESP_ID, settings) end end connections[ESP_ID] = workspace.DescendantAdded:Connect(function(v) if (v:IsA("Model") or v:IsA("BasePart")) and v.Name == settings.TargetName then task.wait(0.1) addToQueue(v, ESP_ID, settings) end end) end function DripESP.Disable(ESP_ID) local settings = all_settings[ESP_ID] if not settings then return end if connections[ESP_ID] then connections[ESP_ID]:Disconnect() connections[ESP_ID] = nil end for _, item in ipairs(ESPFolder:GetChildren()) do if item.Name:match(settings.BillboardName) or item.Name:match(settings.HighlightName) then pcall(function() item:Destroy() end) end end all_settings[ESP_ID] = nil end task.spawn(function() while true do task.wait(5) local currentTime = tick() if currentTime - lastCleanupTime < 5 then continue end lastCleanupTime = currentTime for ESP_ID, settings in pairs(all_settings) do for _, item in ipairs(ESPFolder:GetChildren()) do if item.Name:match(settings.BillboardName) and item.Adornee then local distance = (item.Adornee.Position - rootPart.Position).Magnitude if distance > settings.MaxDistance then pcall(function() item:Destroy() end) end end end end end end) return DripESP