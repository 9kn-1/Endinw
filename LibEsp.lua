-- du78 9kn build
local DripESP = {} local connections = {} local all_settings = {} local player = game:GetService("Players").LocalPlayer local ESPFolder = workspace:FindFirstChild("ESP_Objects") if not ESPFolder then ESPFolder = Instance.new("Folder") ESPFolder.Name = "ESP_Objects" ESPFolder.Parent = workspace end local UPDATE_INTERVAL = 0.25 local lastUpdateTime = 0 local updateQueue = {} local billboardPool = {} local highlightPool = {} local function getBillboardFromPool() if #billboardPool > 0 then return table.remove(billboardPool) end local billboard = Instance.new("BillboardGui") billboard.Size = UDim2.new(0, 120, 0, 30) billboard.StudsOffset = Vector3.new(0, 2, 0) billboard.AlwaysOnTop = true billboard.Enabled = false local label = Instance.new("TextLabel") label.Name = "ESP_Text" label.Parent = billboard label.Size = UDim2.new(1, 0, 1, 0) label.BackgroundTransparency = 1 label.TextStrokeColor3 = Color3.new(0, 0, 0) label.TextStrokeTransparency = 0.3 label.Font = Enum.Font.GothamBold return billboard end local function returnBillboardToPool(billboard) if billboard and billboard.Parent then billboard.Parent = nil billboard.Adornee = nil billboard.Enabled = false billboardPool[#billboardPool + 1] = billboard end end local function updateESPElement(billboard, highlight, targetPart, settings) if not billboard or not billboard.Parent then return false end local rootPart = player.Character and player.Character:FindFirstChild("HumanoidRootPart") if not rootPart then return false end local distance = (targetPart.Position - rootPart.Position).Magnitude if distance > settings.MaxDistance or not targetPart.Parent then billboard.Enabled = false if highlight then highlight.Enabled = false end return false end billboard.Enabled = true if highlight then highlight.Enabled = true end return true end function applyESP(target, ESP_ID, settings) if not target or not target.Parent then return end local isValidType = (settings.TargetType == "Both") or (settings.TargetType == "Model" and target:IsA("Model")) or (settings.TargetType == "Part" and target:IsA("BasePart")) if not isValidType or target.Name ~= settings.TargetName then return end if target:IsA("Model") and settings.CheckForHumanoid and not target:FindFirstChild("Humanoid") then return end local targetPart = target:IsA("Model") and (target.PrimaryPart or target:FindFirstChildWhichIsA("BasePart")) or target if not targetPart then return end local uniqueId = ESP_ID .. "_" .. target:GetDebugId() local billboard = ESPFolder:FindFirstChild(uniqueId .. "_BB") local highlight = ESPFolder:FindFirstChild(uniqueId .. "_HL") if not billboard then local displayText = settings.CustomText or "Target" if settings.CustomTextFormatter then local customText = settings.CustomTextFormatter(target) if customText then displayText = customText elseif customText == nil then if ESP_ID == "NormalDoorESP" then return end end end billboard = getBillboardFromPool() billboard.Name = uniqueId .. "_BB" billboard.Adornee = targetPart billboard.Parent = ESPFolder local label = billboard:FindFirstChild("ESP_Text") if label then label.TextColor3 = settings.TextColor label.TextSize = settings.TextSize label.Text = displayText end end if not highlight and settings.FillTransparency < 1 then highlight = Instance.new("Highlight") highlight.Name = uniqueId .. "_HL" highlight.Adornee = target highlight.FillColor = settings.FillColor highlight.FillTransparency = settings.FillTransparency highlight.OutlineColor = settings.OutlineColor highlight.OutlineTransparency = settings.OutlineTransparency highlight.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop highlight.Enabled = false highlight.Parent = ESPFolder end updateESPElement(billboard, highlight, targetPart, settings) end function DripESP.SetOptions(ESP_ID, opts) all_settings[ESP_ID] = { TargetName = opts.TargetName or "Model", CustomText = opts.CustomText or "Target", TextColor = opts.TextColor or Color3.fromRGB(255, 255, 255), OutlineColor = opts.OutlineColor or Color3.fromRGB(0, 0, 0), FillColor = opts.FillColor or Color3.fromRGB(255, 0, 0), FillTransparency = opts.FillTransparency or 0.7, OutlineTransparency = opts.OutlineTransparency or 0, TextSize = opts.TextSize or 16, CheckForHumanoid = opts.CheckForHumanoid or false, TargetType = opts.TargetType or "Both", MaxDistance = opts.MaxDistance or 1000, CustomTextFormatter = opts.CustomTextFormatter or nil, IsEnabled = false, } end function DripESP.Enable(ESP_ID) local settings = all_settings[ESP_ID] if not settings or settings.IsEnabled then return end settings.IsEnabled = true task.spawn(function() local existingObjects = {} for _, obj in pairs(workspace:GetDescendants()) do if obj.Name == settings.TargetName then existingObjects[#existingObjects + 1] = obj end end local batchSize = 10 for i = 1, #existingObjects, batchSize do for j = i, math.min(i + batchSize - 1, #existingObjects) do if settings.IsEnabled then applyESP(existingObjects[j], ESP_ID, settings) end end if i + batchSize <= #existingObjects then task.wait() end end end) connections[ESP_ID] = workspace.DescendantAdded:Connect(function(v) if settings.IsEnabled and v.Name == settings.TargetName then task.wait(0.1) applyESP(v, ESP_ID, settings) end end) end function DripESP.Disable(ESP_ID) local settings = all_settings[ESP_ID] if not settings or not settings.IsEnabled then return end settings.IsEnabled = false if connections[ESP_ID] then connections[ESP_ID]:Disconnect() connections[ESP_ID] = nil end local itemsToRemove = {} for _, item in pairs(ESPFolder:GetChildren()) do if item.Name:match("^" .. ESP_ID .. "_") then itemsToRemove[#itemsToRemove + 1] = item end end for i = 1, #itemsToRemove do local item = itemsToRemove[i] if item.Name:match("_BB$") then returnBillboardToPool(item) else item:Destroy() end end end local function GlobalESPUpdater() while true do local currentTime = tick() if currentTime - lastUpdateTime < UPDATE_INTERVAL then task.wait(UPDATE_INTERVAL - (currentTime - lastUpdateTime)) continue end lastUpdateTime = currentTime local rootPart = player.Character and player.Character:FindFirstChild("HumanoidRootPart") if not rootPart then task.wait(UPDATE_INTERVAL) continue end local espChildren = ESPFolder:GetChildren() local validItems = {} local itemsToClean = {} for i = 1, #espChildren do local item = espChildren[i] if item and item.Parent then if item.Adornee and item.Adornee.Parent then validItems[#validItems + 1] = item else itemsToClean[#itemsToClean + 1] = item end end end for i = 1, #itemsToClean do local item = itemsToClean[i] if item.Name:match("_BB$") then returnBillboardToPool(item) else item:Destroy() end end local batchSize = 20 for i = 1, #validItems, batchSize do for j = i, math.min(i + batchSize - 1, #validItems) do local item = validItems[j] local adornee = item.Adornee local espId = item.Name:match("^(.-)_") local settings = all_settings[espId] if settings and settings.IsEnabled then local highlightName = espId .. "_" .. adornee:GetDebugId() .. "_HL" local highlight = ESPFolder:FindFirstChild(highlightName) updateESPElement(item, highlight, adornee, settings) else item.Enabled = false local highlight = ESPFolder:FindFirstChild(item.Name:gsub("_BB$", "_HL")) if highlight then highlight.Enabled = false end end end if i + batchSize <= #validItems then task.wait() end end task.wait(UPDATE_INTERVAL) end end task.spawn(GlobalESPUpdater) return DripESP