local DripESP = {} local connections = {} local all_settings = {} local player = game:GetService("Players").LocalPlayer local RunService = game:GetService("RunService") local ESPFolder = workspace:FindFirstChild("ESP_Objects") if not ESPFolder then ESPFolder = Instance.new("Folder") ESPFolder.Name = "ESP_Objects" ESPFolder.Parent = workspace end local distanceCache = {} local lastDistanceUpdate = 0 local DISTANCE_UPDATE_INTERVAL = 0.1 local function updateESPElement(billboard, highlight, targetPart, settings) if not billboard or not billboard.Parent then return end local rootPart = player.Character and player.Character:FindFirstChild("HumanoidRootPart") if not rootPart then return end local currentTime = tick() local cacheKey = tostring(targetPart) local distance if distanceCache[cacheKey] and (currentTime - lastDistanceUpdate) < DISTANCE_UPDATE_INTERVAL then distance = distanceCache[cacheKey] else distance = (targetPart.Position - rootPart.Position).Magnitude distanceCache[cacheKey] = distance if (currentTime - lastDistanceUpdate) >= DISTANCE_UPDATE_INTERVAL then lastDistanceUpdate = currentTime end end if distance > settings.MaxDistance or not targetPart.Parent then billboard.Enabled = false if highlight then highlight.Enabled = false end return false end billboard.Enabled = true if highlight then highlight.Enabled = true end if settings.ShowDistance then local label = billboard:FindFirstChild("ESP_Text") if label then local baseText = settings.CustomText or "Target" label.Text = string.format("%s [%.0f]", baseText, distance) end end return true end function applyESP(target, ESP_ID, settings) if not target or not target.Parent then return end local isValidType = (settings.TargetType == "Both") or (settings.TargetType == "Model" and target:IsA("Model")) or (settings.TargetType == "Part" and target:IsA("BasePart")) if not isValidType or target.Name ~= settings.TargetName then return end if target:IsA("Model") and settings.CheckForHumanoid and not target:FindFirstChild("Humanoid") then return end local targetPart = target:IsA("Model") and (target.PrimaryPart or target:FindFirstChildWhichIsA("BasePart")) or target if not targetPart then return end local uniqueId = ESP_ID .. "_" .. target:GetDebugId() local billboard = ESPFolder:FindFirstChild(uniqueId .. "_BB") local highlight = ESPFolder:FindFirstChild(uniqueId .. "_HL") if not billboard then billboard = Instance.new("BillboardGui") billboard.Name = uniqueId .. "_BB" billboard.Adornee = targetPart billboard.Size = UDim2.new(0, 120, 0, 30) billboard.StudsOffset = Vector3.new(0, 2, 0) billboard.AlwaysOnTop = true billboard.Enabled = false billboard.Parent = ESPFolder local label = Instance.new("TextLabel") label.Name = "ESP_Text" label.Parent = billboard label.Size = UDim2.new(1, 0, 1, 0) label.BackgroundTransparency = 1 label.TextColor3 = settings.TextColor label.TextStrokeColor3 = Color3.new(0, 0, 0) label.TextStrokeTransparency = 0.3 label.TextSize = settings.TextSize label.Font = Enum.Font.GothamBold label.TextScaled = true if settings.CustomTextFormatter then label.Text = settings.CustomTextFormatter(target) or settings.CustomText or "Target" else label.Text = settings.CustomText or "Target" end end if not highlight and settings.FillTransparency < 1 then highlight = Instance.new("Highlight") highlight.Name = uniqueId .. "_HL" highlight.Adornee = target highlight.FillColor = settings.FillColor highlight.FillTransparency = settings.FillTransparency highlight.OutlineColor = settings.OutlineColor highlight.OutlineTransparency = settings.OutlineTransparency highlight.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop highlight.Enabled = false highlight.Parent = ESPFolder end updateESPElement(billboard, highlight, targetPart, settings) end function DripESP.SetOptions(ESP_ID, opts) all_settings[ESP_ID] = { TargetName = opts.TargetName or "Model", CustomText = opts.CustomText or "Target", TextColor = opts.TextColor or Color3.fromRGB(255, 255, 255), OutlineColor = opts.OutlineColor or Color3.fromRGB(0, 0, 0), FillColor = opts.FillColor or Color3.fromRGB(255, 0, 0), FillTransparency = opts.FillTransparency or 0.7, OutlineTransparency = opts.OutlineTransparency or 0, TextSize = opts.TextSize or 16, CheckForHumanoid = opts.CheckForHumanoid or false, TargetType = opts.TargetType or "Both", MaxDistance = opts.MaxDistance or 1000, ShowDistance = opts.ShowDistance or false, CustomTextFormatter = opts.CustomTextFormatter or nil, IsEnabled = false, } end function DripESP.Enable(ESP_ID) local settings = all_settings[ESP_ID] if not settings or settings.IsEnabled then return end settings.IsEnabled = true for _, v in pairs(workspace:GetDescendants()) do if v.Name == settings.TargetName then task.spawn(function() applyESP(v, ESP_ID, settings) end) end end connections[ESP_ID] = workspace.DescendantAdded:Connect(function(v) if settings.IsEnabled and v.Name == settings.TargetName then task.wait(0.1) applyESP(v, ESP_ID, settings) end end) end function DripESP.Disable(ESP_ID) local settings = all_settings[ESP_ID] if not settings or not settings.IsEnabled then return end settings.IsEnabled = false if connections[ESP_ID] then connections[ESP_ID]:Disconnect() connections[ESP_ID] = nil end for _, item in pairs(ESPFolder:GetChildren()) do if item.Name:find("^" .. ESP_ID .. "_") then item:Destroy() end end end local function GlobalESPUpdater() local lastUpdate = 0 local UPDATE_INTERVAL = 0.2 RunService.Heartbeat:Connect(function() local currentTime = tick() if currentTime - lastUpdate < UPDATE_INTERVAL then return end lastUpdate = currentTime local rootPart = player.Character and player.Character:FindFirstChild("HumanoidRootPart") if not rootPart then return end local espChildren = ESPFolder:GetChildren() for i = 1, #espChildren do local item = espChildren[i] if item and item.Parent then local adornee = item.Adornee if adornee and adornee.Parent then local espId = item.Name:match("^(.-)_") local settings = all_settings[espId] if settings and settings.IsEnabled then local highlightName = espId .. "_" .. adornee:GetDebugId() .. "_HL" local highlight = ESPFolder:FindFirstChild(highlightName) updateESPElement(item, highlight, adornee, settings) else item.Enabled = false local highlight = ESPFolder:FindFirstChild(item.Name:gsub("_BB$", "_HL")) if highlight then highlight.Enabled = false end end else item:Destroy() end end end if #espChildren == 0 then distanceCache = {} end end) end GlobalESPUpdater() return DripESP